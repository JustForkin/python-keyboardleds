#!/usr/bin/python
# encoding=UTF-8

# Copyright © 2009, 2012 Jakub Wilk <jwilk@jwilk.net>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the “Software”), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

TEMPERATURE_LIMIT = 75.0
# Temperatures above this limit are consider bogus, and thus ignored.
TEMPERATURE_BOGUS_LIMIT = 200.0
SLEEP = 5
BLINK_SLEEP = 0.2

import glob
import grp
import os
import pwd
import re
import subprocess
import time

import keyboardleds

def drop_privileges():
    uid = pwd.getpwnam('nobody').pw_uid
    gid = grp.getgrnam('nogroup').gr_gid
    os.setgid(gid)
    os.setuid(uid)

event_device = glob.glob('/dev/input/by-path/*-event-kbd')[0]
ledkit = keyboardleds.LedKit(event_device)
drop_privileges()
led = ledkit.caps_lock

temperature_re = re.compile('^ +temp[0-9]+_input: ([0-9.]+)$')

while True:
    alert = False
    sensors = subprocess.Popen(['sensors', '-u'], stdout=subprocess.PIPE)
    for line in sensors.stdout:
        line = line.rstrip()
        match = temperature_re.match(line)
        if match is not None:
            temperature = match.group(1)
            temperature = float(temperature)
            if TEMPERATURE_LIMIT < temperature < TEMPERATURE_BOGUS_LIMIT:
                alert = True
    sensors.wait()
    if alert:
        i = 0
        while i * BLINK_SLEEP < SLEEP:
            if i & 1 == 0:
                led.set()
            else:
                led.reset()
            time.sleep(BLINK_SLEEP)
            i += 1
        led.reset()
    else:
        time.sleep(SLEEP)

# vim:ts=4 sw=4 et
